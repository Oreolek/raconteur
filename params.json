{"name":"Raconteur","tagline":"A friendlier way to write Undum hypertext fiction","body":"# Raconteur\r\n\r\nRaconteur is a wrapper library for Undum, a system for writing hypertext\r\ninteractive fiction. Raconteur that to provide a more programmer-friendly\r\nAPI as well as a bundle of commonly-needed functionality, for novices and\r\nexpert users alike.\r\n\r\nRaconteur is still in active development towards its 1.0 release.\r\n\r\n## Implemented Features\r\n\r\n- DSL-like syntax for defining situations.\r\n- A powerful situation prototype that bundles a lot of commonly-used\r\n  functionality.\r\n- Shorthand for defining common hypertext interactions such as text\r\n  replacement or insertion, similar to popular Twine extensions.\r\n- Most properties of situations can be either functions or strings,\r\n  making it easy to turn a simple situation into a complex one.\r\n- An interface that is specifically designed to be used with ECMAScript 6 via\r\n  Babel, or CoffeeScript.\r\n- Markdown, rather than raw HTML, as the format for most text content using\r\n  markdown-it.\r\n- A tool bundle of iterators that makes it easy to define adaptive text\r\n  snippets.\r\n- Based on CommonJS principles (Using undum-commonjs), allowing all game code\r\n  to be bundled using Browserify.\r\n\r\n## Planned Features\r\n\r\n- An advanced game template that sets up a complete development environment\r\n  for authors: A build system (gulp), CSS preprocessing (Less), and dependency\r\n  management (Browserify + npm).\r\n- A complete code refactoring of Undum and Raconteur itself with testability\r\n  in mind, allowing the use of testing frameworks with Undum stories.\r\n\r\n## Code examples\r\n\r\nThose examples all use CoffeeScript.\r\n\r\nDefining a simple situation in Raconteur:\r\n\r\n```coffeescript\r\nsituation 'raconteur_example',\r\n  content: \"\"\"\r\n  This is an example of a situation using Raconteur's API. It supports\r\n  Markdown in text, so the content of a simple situation can just be\r\n  written out without explicit HTML.\r\n  \"\"\"\r\n```\r\n\r\nUsing text snippets:\r\n\r\n```coffeescript\r\n\r\nsituation 'variations',\r\n  content: (character, system) ->\r\n    # content can be either a function or a simple string, transparently\r\n    color = oneOf(['bright purple', 'sickly green', 'brilliant white'])\r\n      .randomly(system) # We pass the system object so that random results\r\n                        # will always be the same across different runs of\r\n                        # the same saved game.\r\n\r\n    \"\"\"\r\n      # Reflecting Pool\r\n  \r\n      You find yourself in an underground, flooded cave. Light shimmers on\r\n      the walls, #{color}.\r\n    \"\"\"\r\n```\r\n\r\n## Contributors\r\n\r\nUndum was created by Ian Millington. Raconteur was written by Bruno Dias.\r\n\r\n## License\r\n\r\nIn short: You can use, modify, or redistribute Raconteur and Undum, for any\r\npurpose, as long as this license document is kept with copies of it. See\r\nLICENSE for legalese.\r\n\r\nUndum is copyright (c) 2009-2015 I D Millington, and released under the MIT\r\nlicense.\r\n\r\nRaconteur itself is copyright (c) 2015 Bruno Dias, and released under the\r\nsame MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}